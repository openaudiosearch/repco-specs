datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
  output   = "../generated/dbml"
}

generator pothos {
  provider     = "prisma-pothos-types"
  clientOutput = "@prisma/client"
  output       = "../generated/pothos/pothos-types.ts"
}

generator class_validator {
  provider = "prisma-class-validator-generator"
  output   = "../generated/models"
}

generator graphql {
  provider   = "graphql-schema-generator"
  createCRUD = "true"
  output     = "../generated/graphql"
}

generator repco {
  provider   = "repco-prisma-generate"
  output     = "../generated/repco"
}

generator zod {
  provider                 = "zod-prisma"
  output                   = "../generated/zod"
  modelCase                = "PascalCase"
  modelSuffix              = "Model"
  useDecimalJs             = true
  imports                  = "../src/zod-schemas.js"
  prismaJsonNullability    = false
  includeJSExtension       = true
}

enum ContentGroupingVariant {
  EPISODIC
  SERIAL
}

model DataSource {
  uid String @id @unique
  cursor String
}

model Revision {
  id                 String    @id @unique
  type               String
  uid                String
  created            DateTime
  datasource         String

  content            Json

  alternativeIds    String[]

  previousRevisionId String?   @unique
  previousRevision   Revision? @relation("RevisionHistory", fields: [previousRevisionId], references: [id])
  nextRevision       Revision? @relation("RevisionHistory")

  contentGrouping  ContentGrouping?
  contentItem      ContentItem?
  license          License?
  mediaAsset       MediaAsset?
  file             File?
  concept          Concept?
  actor            Actor?
  broadcastEvent   BroadcastEvent?
  broadcastService BroadcastService?
  chapter          Chapter?
  contribution     Contribution?
}

model ContentGrouping {
  uid String @id @unique

  revisionId String   @unique
  revision   Revision @relation(fields: [revisionId], references: [id])

  groupingType String // TODO: enum?

  title       String
  subtitle    String?
  summary     String?
  description String?

  variant           ContentGroupingVariant
  broadcastSchedule String? // TODO: JSON (channel, rrule)

  startingDate    DateTime?
  terminationDate DateTime?

  license                License?      @relation(fields: [licenseUid], references: [uid])
  licenseUid             String?
  contentItemsPrimary    ContentItem[] @relation("primaryGrouping")
  contentItemsAdditional ContentItem[]
}

model ContentItem {
  uid                 String            @id @unique /// @zod.refine(imports.isValidUID)
  revisionId          String            @unique
  revision            Revision          @relation(fields: [revisionId], references: [id])
  title               String
  subtitle            String
  summary             String
  content             String
  contentFormat       String
  primaryGrouping     ContentGrouping?   @relation("primaryGrouping", fields: [primaryGroupingUid], references: [uid])
  primaryGroupingUid  String?
  additionalGroupings ContentGrouping[]
  license             License?           @relation(fields: [licenseUid], references: [uid])
  licenseUid          String?
  mediaAssets         MediaAsset[]
  contributions       Contribution[]
  concepts            Concept[]
  broadcastEvents     BroadcastEvent[]
}

model License {
  uid              String            @id @unique
  revisionId       String            @unique
  revision         Revision          @relation(fields: [revisionId], references: [id])
  name             String
  contentItems     ContentItem[]
  mediaAssets      MediaAsset[]
  contentGroupings ContentGrouping[]
}

model MediaAsset {
  uid         String   @id @unique
  revisionId  String   @unique
  revision    Revision @relation(fields: [revisionId], references: [id])
  title       String
  description String?

  file    File   @relation("file", fields: [fileUid], references: [uid])
  fileUid String

  duration  Float?
  mediaType String // TODO: Enum?

  contentItems   ContentItem[]
  transcripts    Transcript[]
  chapters       Chapter[]
  teaserImage    File?         @relation("thumbnail", fields: [teaserImageUid], references: [uid])
  teaserImageUid String?

  license    License? @relation(fields: [licenseUid], references: [uid])
  licenseUid String?

  contributions Contribution[]
  concepts      Concept[]
}

model Contribution {
  uid          String        @id @unique
  revisionId   String        @unique
  revision     Revision      @relation(fields: [revisionId], references: [id])
  role         String
  actors       Actor[]
  mediaAssets  MediaAsset[]
  contentItems ContentItem[]
}

model Actor {
  uid                  String             @id @unique
  revisionId           String             @unique
  revision             Revision           @relation(fields: [revisionId], references: [id])
  name                 String
  personOrOrganization String
  contactInformation   String
  profilePicture       File?              @relation(fields: [profilePictureUid], references: [uid])
  profilePictureUid    String
  contributions        Contribution[]
  broadcastService     BroadcastService[]
}

model Chapter {
  uid           String     @id @unique
  revisionId    String     @unique
  revision      Revision   @relation(fields: [revisionId], references: [id])
  start         Float
  duration      Float
  title         String
  type          String // TODO: enum?
  mediaAsset    MediaAsset @relation(fields: [mediaAssetUid], references: [uid])
  mediaAssetUid String
}

model BroadcastEvent {
  uid                 String           @id @unique
  revisionId          String           @unique
  revision            Revision         @relation(fields: [revisionId], references: [id])
  start               Float
  duration            Float
  contentItem         ContentItem      @relation(fields: [contentItemUid], references: [uid])
  contentItemUid      String
  broadcastService    BroadcastService @relation(fields: [broadcastServiceUid], references: [uid])
  broadcastServiceUid String
}

model BroadcastService {
  uid             String           @id @unique
  revisionId      String           @unique
  revision        Revision         @relation(fields: [revisionId], references: [id])
  name            String
  publisher       Actor            @relation(fields: [publisherUid], references: [uid])
  publisherUid    String
  broadcastEvents BroadcastEvent[]
  medium          String // FM, Web, ...
  address         String
}

model Transcript {
  uid           String     @id @unique
  language      String
  text          String
  engine        String
  mediaAsset    MediaAsset @relation(fields: [mediaAssetUid], references: [uid])
  mediaAssetUid String
}

model File {
  uid                String       @id @unique
  revisionId         String       @unique
  revision           Revision     @relation(fields: [revisionId], references: [id])
  contentUrl         String
  mimeType           String?
  // contentSize        Int?  // size in bytes
  multihash          String? // hash encoded as multihash (IPFS spec)
  duration           Float?
  codec              String?
  bitrate            Int?
  resolution         String?
  additionalMetadata String?
  asMediaAssets      MediaAsset[] @relation("file")
  asThumbnail        MediaAsset[] @relation("thumbnail")
  actors             Actor[]
}

model Concept {
  uid             String        @id @unique
  revisionId      String        @unique
  revision        Revision      @relation(fields: [revisionId], references: [id])
  originNamespace String
  name            String
  summary         String
  description     String
  wikidataID      String
  contentItems    ContentItem[]
  mediaAssets     MediaAsset[]
}
